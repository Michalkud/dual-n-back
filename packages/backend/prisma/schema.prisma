// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?

  // User preferences
  theme         String  @default("light")
  notifications Boolean @default(true)
  dataSync      Boolean @default(true)
  analytics     Boolean @default(true)

  // Relations
  sessions Session[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Session {
  id        String   @id @default(cuid())
  sessionId String   @unique
  userId    String?
  
  // Session metadata
  startedAt DateTime
  endedAt   DateTime?
  mode      String   // dual, quad, penta
  
  // Session settings snapshot
  stimulusDuration        Int
  interstimulusInterval   Int
  initialN                Int
  adaptiveThresholdInc    Float
  adaptiveThresholdDec    Float
  adaptiveWindow          Int
  audioEnabled            Boolean
  audioVolume             Float
  spatialAudio            Boolean
  theme                   String
  colorblindMode          Boolean
  highContrast            Boolean
  screenReader            Boolean
  keyboardOnly            Boolean
  reducedMotion           Boolean
  
  // Session summary
  totalTrials         Int?
  correctResponses    Int?
  falseAlarms         Int?
  misses              Int?
  accuracy            Float?
  averageReactionTime Float?
  maxN                Int?
  finalScore          Int?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  trials Trial[]

  @@map("sessions")
}

model Trial {
  id        String   @id @default(cuid())
  trialId   String   @unique
  sessionId String
  
  // Trial data
  stream       String // position, color, shape, tone, letter
  n            Int
  stimulusType String
  stimulusValue String
  timestamp    DateTime
  
  // User response
  reacted      Boolean?
  correct      Boolean?
  reactionTime Int? // milliseconds
  
  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("trials")
}